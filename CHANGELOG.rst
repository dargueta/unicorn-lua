Changes
=======

1.0b5 (2019-10-23)
------------------

* Switch build system to CMake

  * C++ documentation is now generated in the ``build/docs`` directory
  * Library binary is now generated in ``build/lib``

* Moved examples to root directory of repo instead of as a subdirectory of ``docs``
* Add unit tests to C++ code directly, not just from Lua
* Fix wrong destructor being called on Context objects
* Fix wrong library file extension on OSX -- should be ``.so`` not ``.dylib``
* Fix buffer overflow when reading 64-bit register on a 32-bit architecture
* Fixed wrong installation directory -- library should go to Lua's `lib` dir, not LuaRocks
* Removed some dead code
* Fixed odd bug in backport of ``lua_seti()`` that coincidentally worked, but only when
  the Lua stack was small.

1.0b4 (2019-09-23)
------------------

**Official support for OSX!**

* Fix memory leak when writing multiple registers
* Made creating hooks and contexts the responsibility of the UCLuaEngine class, so
  they're always destroyed when the engine is closed, and no other functions are allowed
  to create them without the Engine's knowledge. This eliminates some kinds of memory
  leaks.
* Fixed bug where ``engine:query(SOME_QUERY_TYPE)`` would look at the first argument (the
  engine) for the query type, instead of the second argument.
* Removed a number of unused or nearly-unused functions, made some others static that
  didn't need to be/probably shouldn't be shared.


1.0b3 (2019-09-18)
------------------

* Changed MIPS file extension from ``*.S`` to ``*.s``.
* Documented floating-point limitation in repo's README.
* Overhauled ``configure`` script to allow using the operating system's Lua installation.
  Using a virtual environment is no longer forced.
* Hooks are now always destroyed along with the engine they're attached to. This solves
  a race condition on LuaJIT where the garbage collector sometimes deletes the hook *after*
  its engine got destroyed.

Move to C++
~~~~~~~~~~~

This is now a C++ project coded to be compatible with C++11 and higher. I did this because
managing an engine's hooks using a Lua table instead of inside the library was unwieldy
and prone to memory leaks or spurious crashes, especially in low-memory situations.
Moving to C++ and using template containers sounded like the least amount of work.

Significant refactor
~~~~~~~~~~~~~~~~~~~~

All files from ``src/constants`` and their corresponding headers were removed. The
constants files are now autogenerated from the installed Unicorn headers, as done in the
Python binding.

**Breaking**: The constants submodules now have ``_const`` suffixed to them. For example,
``unicorn.x86`` is now ``unicorn.x86_const``. This'll allow us to create submodules with
additional architecture-specific functionality, and mirrors the Python binding's structure
more closely.

1.0b2 (2019-08-21)
------------------

* Better documentation
* Add support for MIPS examples, describe cross-compilation toolchain
* Error handling for when memory allocation fails


1.0b1 (2019-06-27)
------------------

Minor change -- all X86 binaries for the examples are included, so you only need
``nasm`` if you're going to modify them.


1.0b0 (2019-04-13)
------------------

Initial release
