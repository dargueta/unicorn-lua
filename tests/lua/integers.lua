local unicorn = require 'unicorn'
local x86 = require 'unicorn.x86'

describe('[x86] Integer accuracy', function ()
  describe('8-bit value', function ()
    it('64-bit register', function ()
      local uc = unicorn.open(unicorn.UC_ARCH_X86, unicorn.UC_MODE_64)
      uc:reg_write(x86.UC_X86_REG_RAX, 116)
      assert.are.equals(116, uc:reg_read(x86.UC_X86_REG_RAX))
    end)

    it('32-bit register', function ()
      local uc = unicorn.open(unicorn.UC_ARCH_X86, unicorn.UC_MODE_64)
      uc:reg_write(x86.UC_X86_REG_EAX, 91)
      assert.are.equals(91, uc:reg_read(x86.UC_X86_REG_EAX))
    end)

    it('16-bit register', function ()
      local uc = unicorn.open(unicorn.UC_ARCH_X86, unicorn.UC_MODE_64)
      uc:reg_write(x86.UC_X86_REG_AX, 78)
      assert.are.equals(78, uc:reg_read(x86.UC_X86_REG_AX))
    end)

    it('8-bit register', function ()
      local uc = unicorn.open(unicorn.UC_ARCH_X86, unicorn.UC_MODE_64)
      uc:reg_write(x86.UC_X86_REG_AL, 128)
      assert.are.equals(128, uc:reg_read(x86.UC_X86_REG_AL))
    end)
  end)

  describe('16-bit value', function ()
    it('64-bit register', function ()
      local uc = unicorn.open(unicorn.UC_ARCH_X86, unicorn.UC_MODE_64)
      uc:reg_write(x86.UC_X86_REG_RAX, 57836)
      assert.are.equals(57836, uc:reg_read(x86.UC_X86_REG_RAX))
    end)

    it('32-bit register', function ()
      local uc = unicorn.open(unicorn.UC_ARCH_X86, unicorn.UC_MODE_64)
      uc:reg_write(x86.UC_X86_REG_EAX, 64501)
      assert.are.equals(64501, uc:reg_read(x86.UC_X86_REG_EAX))
    end)

    it('16-bit register', function ()
      local uc = unicorn.open(unicorn.UC_ARCH_X86, unicorn.UC_MODE_64)
      uc:reg_write(x86.UC_X86_REG_AX, 14698)
      assert.are.equals(14698, uc:reg_read(x86.UC_X86_REG_AX))
    end)
  end)

  describe('32-bit value', function ()
    it('64-bit register', function ()
      local uc = unicorn.open(unicorn.UC_ARCH_X86, unicorn.UC_MODE_64)
      uc:reg_write(x86.UC_X86_REG_RAX, 0x8057f18a)
      assert.are.equals(0x8057f18a, uc:reg_read(x86.UC_X86_REG_RAX))
    end)

    it('32-bit register', function ()
      local uc = unicorn.open(unicorn.UC_ARCH_X86, unicorn.UC_MODE_64)
      uc:reg_write(x86.UC_X86_REG_EAX, 0xf8105110)
      assert.are.equals(0xf8105110, uc:reg_read(x86.UC_X86_REG_EAX))
    end)
  end)

  describe('64-bit value', function ()
    it('64-bit register, MSB clear', function ()
      local uc = unicorn.open(unicorn.UC_ARCH_X86, unicorn.UC_MODE_64)
      uc:reg_write(x86.UC_X86_REG_RAX, 0x17f8057f18a)
      assert.are.equals(0x17f8057f18a, uc:reg_read(x86.UC_X86_REG_RAX))
    end)

    it('64-bit register, MSB set', function ()
      local uc = unicorn.open(unicorn.UC_ARCH_X86, unicorn.UC_MODE_64)
      uc:reg_write(x86.UC_X86_REG_RAX, 0xc0239d1f81be810a)
      assert.are.equals(0xc0239d1f81be810a, uc:reg_read(x86.UC_X86_REG_RAX))
    end)
  end)
end)
