# WARNING: This makefile is intended to be invoked by LuaRocks, not manually.

# Disable all default build rules so that we have full control.
.SUFFIXES:

################################################################################
# DEFAULTS
# These are only used when this Makefile is run manually. You should only be
# doing that for `make clean`. Use `luarocks` for everything else.

# Override `LUAROCKS` to use a virtual environment. For example, if you have Lua
# installed in `.venv` you can do `make LUAROCKS=.venv/bin/luarocks` to run all
# commands using that installation. Honestly, though, you should be using LR to
# invoke the build and test commands, not running them directly in here.

LUAROCKS = luarocks
get_luarocks_var = $(shell $(LUAROCKS) config variables.$1)

BUSTED := $(call get_luarocks_var,SCRIPTS_DIR)/busted
CC := $(call get_luarocks_var,CC)
CXXFLAGS := $(call get_luarocks_var,CFLAGS)
CURL := $(call get_luarocks_var,CURL)
LD := $(call get_luarocks_var,LD)
LIBFLAG := $(call get_luarocks_var,LIBFLAG)
LIB_EXTENSION := $(call get_luarocks_var,LIB_EXTENSION)
LUA := $(call get_luarocks_var,LUA)
LUA_DIR := $(call get_luarocks_var,LUA_DIR)
LUA_INCDIR := $(call get_luarocks_var,LUA_INCDIR)
LUA_LIBDIR := $(call get_luarocks_var,LUA_LIBDIR)
LUA_VERSION := $(call get_luarocks_var,LUA_VERSION)
MKDIR := $(call get_luarocks_var,MKDIR)
OBJ_EXTENSION := $(call get_luarocks_var,OBJ_EXTENSION)
UNICORN_INCDIR = /usr/include

################################################################################

# Disable 64-bit integer tests for Lua <5.3
ifeq ($(LUA_VERSION),5.1)
    BUSTED_FLAGS = --exclude-tags="int64only"
else ifeq ($(LUA_VERSION),5.2)
    BUSTED_FLAGS = --exclude-tags="int64only"
else
    BUSTED_FLAGS =
endif


IS_LUAJIT = $(shell $(LUA) -e 'if _G.jit ~= nil then print(1) else print(0) end')
ifeq ($(IS_LUAJIT),1)
    # LuaJIT
    DEFAULT_LUA_LIB_NAME = luajit-$(LUA_VERSION)
    LUAJIT_VERSION = $(shell \
        $(LUA) -e 'print(string.format("%d.%d", jit.version_num / 10000, (jit.version_num / 100) % 100))' \
    )
    FALLBACK_LUA_INCDIR = $(LUA_DIR)/include/luajit-$(LUAJIT_VERSION)
else
    # Regular Lua
    DEFAULT_LUA_LIB_NAME = lua
    FALLBACK_LUA_INCDIR = $(LUA_DIR)/include
endif

BUILD_DIR = $(CURDIR)/build

ARCHITECTURE_HEADERS = $(wildcard $(UNICORN_INCDIR)/unicorn/*.h)
ARCHITECTURE_SLUGS = $(filter-out platform,$(basename $(notdir $(ARCHITECTURE_HEADERS))))

CONSTS_DIR = src/constants
CONSTANT_FILES = $(foreach s,$(ARCHITECTURE_SLUGS),$(CONSTS_DIR)/$(s)_const.cpp)

CPP_TEMPLATE_SOURCES = src/basic_control_functions.template src/registers.template src/registers_const.template
AUTOGENERATED_CPP_FILES = $(CPP_TEMPLATE_SOURCES:.template=.cpp)

HEADER_TEMPLATE_SOURCES =include/unicornlua/register_types.template
AUTOGENERATED_HPP_FILES = $(HEADER_TEMPLATE_SOURCES:.template=.hpp)

LIB_BUILD_TARGET = $(BUILD_DIR)/unicorn.$(LIB_EXTENSION)
LIB_CPP_SOURCES = $(wildcard src/*.cpp) $(CONSTANT_FILES) $(AUTOGENERATED_CPP_FILES)
LIB_OBJECT_FILES = $(LIB_CPP_SOURCES:.cpp=.$(OBJ_EXTENSION))

TEST_EXECUTABLE = $(BUILD_DIR)/cpp_test
TEST_CPP_SOURCES = $(wildcard tests/c/*.cpp)
TEST_LUA_SOURCES = $(wildcard tests/lua/*.lua)
TEST_HEADERS = $(wildcard tests/c/*.hpp)
TEST_CPP_OBJECT_FILES = $(TEST_CPP_SOURCES:.cpp=.$(OBJ_EXTENSION))

TEMPLATE_DATA_FILES = $(wildcard src/template_data/*.lua)

LIBRARY_DIRECTORIES = $(LUA_LIBDIR) $(UNICORN_LIBDIR)
HEADER_DIRECTORIES = $(strip $(CURDIR)/include $(LUA_INCDIR) $(FALLBACK_LUA_INCDIR) $(UNICORN_INCDIR))

ifndef USER_CXX_FLAGS
    USER_CXX_FLAGS =
endif

OTHER_CXXFLAGS = -std=c++11 -DIS_LUAJIT=$(IS_LUAJIT)
WARN_FLAGS = -Wall -Wextra -Werror -Wpedantic -pedantic-errors
INCLUDE_PATH_FLAGS = $(addprefix -I,$(HEADER_DIRECTORIES))
LIB_PATH_FLAGS = $(addprefix -L,$(LIBRARY_DIRECTORIES))
REQUIRED_LIBS = unicorn stdc++
REQUIRED_LIBS_FLAGS = $(addprefix -l,$(REQUIRED_LIBS))

# LUALIB isn't always provided. This breaks building our tests on LuaJIT, which
# uses a filename other than liblua.a for its library. Thus, -llua won't work on
# LuaJIT (any platform) or Windows (any Lua version).
LINK_TO_LUA_FLAG = $(if $(LUALIB),-l:$(LUALIB),-l$(DEFAULT_LUA_LIB_NAME))

CXX_CMD = $(CC) $(OTHER_CXXFLAGS) $(USER_CXX_FLAGS) $(WARN_FLAGS) $(INCLUDE_PATH_FLAGS)
LINK_CMD = $(LD) $(LIB_PATH_FLAGS) $(LDFLAGS)

DOCTEST_TAG = v2.4.11
DOCTEST_HEADER = tests/c/doctest.h

# Uncomment for debugging autogenerated files
# .PRECIOUS: $(AUTOGENERATED_CPP_FILES) $(AUTOGENERATED_HPP_FILES) $(CONSTANT_FILES)


export LUA_PATH := $(shell $(LUAROCKS) path --lr-path)
export LUA_CPATH := $(shell $(LUAROCKS) path --lr-cpath)
export PATH := $(shell $(LUAROCKS) path --lr-bin);$(PATH)


$(LIB_BUILD_TARGET): $(LIB_OBJECT_FILES) | $(BUILD_DIR)
	$(LINK_CMD) $(LIBFLAG) -o $@ $^ $(REQUIRED_LIBS_FLAGS)


.PHONY: install
install: $(LIB_BUILD_TARGET)
	Move-Item -Path $^ -Destination $(INST_LIBDIR)


$(TEST_EXECUTABLE): $(TEST_CPP_OBJECT_FILES) $(LIB_OBJECT_FILES) | $(BUILD_DIR)
	$(LINK_CMD) -o $@ $^ $(REQUIRED_LIBS_FLAGS) $(LINK_TO_LUA_FLAG) -lm


$(CONSTS_DIR)/%_const.cpp: $(UNICORN_INCDIR)/unicorn/%.h | $(CONSTS_DIR)
	$(LUA) tools/generate_constants.lua $< $@


tests/c/%.$(OBJ_EXTENSION): tests/c/%.cpp $(AUTOGENERATED_HPP_FILES) $(TEST_HEADERS) | $(DOCTEST_HEADER)
	$(CXX_CMD) $(CXXFLAGS) -c -o $@ $<


%.$(OBJ_EXTENSION): %.cpp $(AUTOGENERATED_HPP_FILES)
	$(CXX_CMD) $(CXXFLAGS) -c -o $@ $<


%.cpp: %.template $(TEMPLATE_DATA_FILES)
	$(LUA) tools/render_template.lua -o $@ $^


%.hpp: %.template $(TEMPLATE_DATA_FILES)
	$(LUA) tools/render_template.lua -o $@ $^


$(DOCTEST_HEADER):
	$(CURL) -sSo $@ https://raw.githubusercontent.com/doctest/doctest/$(DOCTEST_TAG)/doctest/doctest.h


$(CONSTS_DIR) $(BUILD_DIR):
	$(MKDIR) $@


$(BUSTED):
	$(LUAROCKS) install --local busted


.PHONY: all
all: $(LIB_BUILD_TARGET) $(TEST_EXECUTABLE)


.PHONY: clean
clean:
	$(RM) $(LIB_OBJECT_FILES) $(CONSTANT_FILES) $(LIB_BUILD_TARGET)
	$(RM) $(TEST_EXECUTABLE) $(TEST_CPP_OBJECT_FILES) $(DOCTEST_HEADER)
	$(RM) -r $(BUILD_DIR) $(CONSTS_DIR) $(AUTOGENERATED_CPP_FILES) $(AUTOGENERATED_HPP_FILES)


.PHONY: test
test: $(TEST_EXECUTABLE) $(TEST_LUA_SOURCES) | $(BUSTED)
	$(TEST_EXECUTABLE)
	$(BUSTED) $(BUSTED_FLAGS)                     \
	    --cpath="$(BUILD_DIR)/?.$(LIB_EXTENSION)" \
	    --lua=$(LUA)                              \
	    --shuffle                                 \
	    -p lua                                    \
	    tests/lua


.PHONY: format
format:
	@clang-format --Werror -i --verbose \
	    $(filter-out $(AUTOGENERATED_CPP_FILES),$(wildcard src/*.cpp)) \
	    $(filter-out $(AUTOGENERATED_HPP_FILES),$(wildcard include/unicornlua/*.hpp)) \
	    $(wildcard tests/c/*.cpp) \
	    $(wildcard tests/c/*.hpp)


# Convenience target for generating all templated files. This is mostly for
# making IDEs and linters shut up about "missing" files.
.PHONY: autogen-files
autogen-files: $(AUTOGENERATED_CPP_FILES) $(AUTOGENERATED_HPP_FILES) $(CONSTANT_FILES)
