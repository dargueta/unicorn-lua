${"# FILE AUTOMATICALLY GENERATED -- DO NOT MODIFY"}

# architectures = {"arm64", "arm", "m68k", "mips", "ppc", "riscv", "s390x", "sparc", "tricore", "x86"}
# c_template_sources = dir.getfiles("csrc", "*.template")
# h_template_sources = dir.getfiles("csrc/unicornlua", "*.template")
# c_sources = dir.getfiles("csrc", "*.c")
# lib_c_sources_list = tablex.imap(function (s) return "$(SOURCE_DIR)\\" .. s end, c_sources)

SOURCE_DIR = csrc
LUA_SOURCE_DIR = src\unicorn

AUTOGENERATED_LUA_FILES = \
# for _, arch in ipairs(architectures) do
    $(LUA_SOURCE_DIR)\${arch}_const.lua \
# end
    $(LUA_SOURCE_DIR)\registers_const.lua \
    $(LUA_SOURCE_DIR)\unicorn_const.lua

HEADER_TEMPLATE_SOURCES = ${stringx.join("  ", h_template_sources)}
C_TEMPLATE_SOURCES = ${stringx.join("  ", c_template_sources)}
AUTOGENERATED_C_FILES = $(C_TEMPLATE_SOURCES:.template=.c)
AUTOGENERATED_H_FILES = $(HEADER_TEMPLATE_SOURCES:.template=.h)
ALL_AUTOGENERATED_FILES = $(AUTOGENERATED_LUA_FILES) $(AUTOGENERATED_C_FILES) $(AUTOGENERATED_H_FILES)

LIB_BUILD_TARGET = $(SOURCE_DIR)\unicorn_c_.$(LIB_EXTENSION)
LIB_C_SOURCES = ${ stringx.join("  ", lib_c_sources_list) } $(AUTOGENERATED_C_FILES)
LIB_OBJECT_FILES = $(LIB_C_SOURCES:.c=.$(OBJ_EXTENSION))
# -- We may need to make this an absolute path, unclear
CURDIR = .

C_CMD = $(CC) /I $(CURDIR)\include /I $(UNICORN_INCDIR) /I $(LUA_INCDIR) $(CFLAGS) $(USER_CFLAGS) /c
LINK_CMD = $(LD) $(LIB_PATH_FLAGS) $(LDFLAGS) $(USER_LDFLAGS)

.c.obj: $(AUTOGENERATED_H_FILES)
	$(C_CMD) $@ $*

# for _, h_file in ipairs(h_template_sources) do
${ stringx.replace(h_file, ".template", ".h") }: tools\render_template.lua
${ stringx.replace(h_file, ".template", ".h") }: ${h_file} csrc\template_data\*.lua
    $(LUA) tools\render_template.lua -o $@ $**
# end

# for _, c_file in ipairs(c_template_sources) do
${ stringx.replace(c_file, ".template", ".c") }: tools\render_template.lua
${ stringx.replace(c_file, ".template", ".c") }: ${c_file} csrc\template_data\*.lua
    $(LUA) tools\render_template.lua -o $@ $**
# end

# for _, arch in ipairs(architectures) do
$(LUA_SOURCE_DIR)\${arch}_extracted_consts.txt: tools\process_header.lua
	$(LUA) $< --missing-ok $(UNICORN_INCDIR)\unicorn\${arch}.h $@
# end
