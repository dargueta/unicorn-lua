# Build a list of the installed header files and strip the stems out so that we
# can generate the corresponding *_const.cpp files from them. This way, we don't
# make assumptions about which architectures the user has built and we don't need
# to change the code when Unicorn adds new architectures.
file(GLOB INSTALLED_ARCH_HEADERS "${UNICORN_HEADERS_PATH}/unicorn/*.h")
foreach(path IN ITEMS ${INSTALLED_ARCH_HEADERS})
    cmake_path(GET path STEM LAST_ONLY CURRENT_SLUG)
    # platform.h is not of interest to us.
    if(NOT CURRENT_SLUG STREQUAL "platform")
        list(APPEND HEADER_SLUGS "${CURRENT_SLUG}")
    endif()
endforeach()


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~ Define dependencies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

file(GLOB LIBRARY_CPP_SOURCES "${PROJECT_SOURCE_DIR}/src/*.cpp")

# Build a list of the .cpp files that need to be autogenerated with all the
# architecture-specific values. This takes the architecture slugs and turns them into
# file paths.
list(
    TRANSFORM HEADER_SLUGS
    PREPEND "${CMAKE_CURRENT_BINARY_DIR}/"
    OUTPUT_VARIABLE _const_files
)
list(TRANSFORM _const_files APPEND "_const.cpp")


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Define targets ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

# Create commands for autogenerating all the constants files.
foreach(_slug IN ITEMS ${HEADER_SLUGS})
    set(_file "${CMAKE_CURRENT_BINARY_DIR}/${_slug}_const.cpp")
    add_custom_command(
        OUTPUT "${_file}"
        COMMAND "python3" "${PROJECT_SOURCE_DIR}/tools/generate_constants.py" "${UNICORN_HEADERS_PATH}/unicorn/${_slug}.h" "${_file}"
        WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}"
    )
endforeach()

add_library(unicornlua_library SHARED ${LIBRARY_CPP_SOURCES} ${_const_files})

target_include_directories(
    unicornlua_library
    PRIVATE
    "${PROJECT_SOURCE_DIR}/include"
    ${UNICORN_HEADERS_PATH}
    ${LUA_INCDIR}
)

if(IS_LUAJIT)
    target_compile_definitions(unicornlua_library PUBLIC IS_LUAJIT=1)
endif()

# Override the default naming for the library. On POSIX systems the prefix "lib" is
# added, and the default name (without the prefix) uses the project name. We want the
# output file to be `unicorn.dll` on Windows, `unicorn.so` everywhere else.
set_target_properties(
    unicornlua_library PROPERTIES
    PREFIX ""
    OUTPUT_NAME "unicorn"
    SUFFIX "${LIBRARY_FILE_EXTENSION}"
)


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~ Set compiler options ~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

if (CMAKE_CXX_COMPILER_ID MATCHES "GNU|AppleClang|Clang")
    set(CMAKE_CXX_FLAGS_DEBUG "-O0 -ggdb -frtti")
    set(CMAKE_CXX_FLAGS_RELEASE "-Ofast -fno-rtti")
    target_compile_options(unicornlua_library PRIVATE -Wall -Wextra -Werror -Wpedantic)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    # Visual studio options
    set(CMAKE_CXX_FLAGS_DEBUG "/Od /Z7 /GR")
    set(CMAKE_CXX_FLAGS_RELEASE "/Ot /GR-")
    target_compile_options(unicornlua_library PRIVATE /W4 /WX)
else()
    message(FATAL_ERROR "Unrecognized compiler: ${CMAKE_CXX_COMPILER_ID}")
endif()


# Apparently OSX requires this stuff: https://stackoverflow.com/q/42371892
if (CMAKE_HOST_APPLE)
    target_link_options(unicornlua_library BEFORE PUBLIC -undefined dynamic_lookup)
endif()


target_link_libraries(
    unicornlua_library LINK_PUBLIC ${UNICORN_LIBRARY} ${PTHREADS_LIBRARY}
)


# Lua needs to be statically linked so we add it as a source, not a library to
# link to.
target_sources(unicornlua_library PUBLIC ${LUA_LIBRARY})

# For some reason this is required only for LuaJIT on *NIX platforms except OSX.
if(IS_LUAJIT AND UNIX AND (NOT APPLE))
    target_link_libraries(unicornlua_library LINK_PUBLIC dl)
endif()

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Installation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

# Override the default destination. Normally it's ${CMAKE_INSTALL_PREFIX} plus
# a platform-specific directory like "lib", "include", or "bin". We don't want
# those, so we have to override the entire destination.
install(TARGETS unicornlua_library LIBRARY DESTINATION "${CMAKE_INSTALL_PREFIX}")
