if (NOT DEFINED ARCHITECTURE_SLUGS)
    set(ARCHITECTURE_SLUGS arm;arm64;mips;m68k;sparc;x86)
endif()


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~ Define dependencies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

file(GLOB LIBRARY_CPP_SOURCES "${PROJECT_SOURCE_DIR}/src/*.cpp")

# Build a list of the .cpp files that need to be autogenerated with all the
# architecture-specific values. This takes the architecture slugs and turns them into
# file paths.
list(
    TRANSFORM ARCHITECTURE_SLUGS
    PREPEND "${CMAKE_CURRENT_BINARY_DIR}/"
    OUTPUT_VARIABLE _arch_files
)
list(TRANSFORM _arch_files APPEND "_const.cpp")


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Define targets ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

# Create commands for autogenerating all the constants files.
foreach(_slug IN ITEMS ${ARCHITECTURE_SLUGS})
    set(_file "${CMAKE_CURRENT_BINARY_DIR}/${_slug}_const.cpp")
    add_custom_command(
        OUTPUT "${_file}"
        COMMAND "${Python3_EXECUTABLE}" "${PROJECT_SOURCE_DIR}/tools/generate_constants.py" "${UNICORN_HEADERS_PATH}/unicorn/${_slug}.h" "${_file}"
        WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}"
    )
endforeach()

add_library(unicornlua_library SHARED ${LIBRARY_CPP_SOURCES} ${_arch_files})

target_include_directories(
    unicornlua_library
    PRIVATE
    "${PROJECT_SOURCE_DIR}/include"
    ${UNICORN_HEADERS_PATH}
    ${LUA_INCLUDE_DIR}
)

if(IS_LUAJIT)
    target_compile_definitions(unicornlua_library PUBLIC IS_LUAJIT=1)
endif()

# Override the default naming for the library. On POSIX systems the prefix "lib" is
# added, and the default name (without the prefix) uses the project name. We want the
# output file to be `unicorn.dll` on Windows, `unicorn.so` everywhere else.
set_target_properties(
    unicornlua_library PROPERTIES
    PREFIX ""
    OUTPUT_NAME "unicorn"
    SUFFIX "${LUA_CLIB_EXTENSION}"
)


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~ Set compiler options ~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

if (CMAKE_CXX_COMPILER_ID MATCHES "GNU|AppleClang|Clang")
    target_compile_options(unicornlua_library PRIVATE -Wall -Wextra -Werror -Wpedantic)

    if (CMAKE_BUILD_TYPE STREQUAL "Release")
        target_compile_options(unicornlua_library PRIVATE -Ofast -fno-rtti)
    else()
        target_compile_options(unicornlua_library PRIVATE -O0 -ggdb -frtti)
    endif()
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    # Visual studio options
    message(FATAL_ERROR "Visual studio not supported yet.")
endif()


# Apparently OSX requires this stuff: https://stackoverflow.com/q/42371892
if (CMAKE_HOST_APPLE)
    # Normally we'd use target_link_options() for this but upgrading to CMake 3.13 has
    # proven to be an utter pain on Travis CI so I'm using the 3.12-compatible workaround
    # to get this to work.
    target_link_libraries(unicornlua_library PUBLIC "-undefined dynamic_lookup")

    # For CMake 3.13+
    # target_link_options(unicornlua_library BEFORE PUBLIC -undefined dynamic_lookup)
endif()


find_library(UNICORN_LIBRARY NAMES unicorn libunicorn)
find_library(PTHREADS_LIBRARY NAMES pthread libpthread)   # Needed by Unicorn
target_link_libraries(
    unicornlua_library LINK_PUBLIC ${UNICORN_LIBRARY} ${PTHREADS_LIBRARY}
)

# For some reason this is required only for LuaJIT on *NIX platforms except OSX.
if(IS_LUAJIT AND UNIX AND (NOT APPLE))
    target_link_libraries(unicornlua_library LINK_PUBLIC dl)
endif()


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Installation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

install(
    TARGETS unicornlua_library
    LIBRARY
    DESTINATION ${LUA_INSTALL_DIR}
)
