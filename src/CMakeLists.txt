if (NOT DEFINED ARCHITECTURE_SLUGS)
    set(ARCHITECTURE_SLUGS arm;arm64;mips;m68k;sparc;x86)
endif()


execute_process(
    COMMAND ${LUA_EXE} -e "print(string.match('${LUA_CUSTOM_CPATH}', '^([^?]+)'))"
    OUTPUT_VARIABLE LUA_INSTALL_DIR
    OUTPUT_STRIP_TRAILING_WHITESPACE
)


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~ Define dependencies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

file(GLOB LIBRARY_CPP_SOURCES "${PROJECT_SOURCE_DIR}/src/*.cpp")

# Build a list of the .cpp files that need to be autogenerated with all the
# architecture-specific values. This takes the architecture slugs and turns them into
# file paths.
list(
    TRANSFORM ARCHITECTURE_SLUGS
    PREPEND "${CMAKE_CURRENT_BINARY_DIR}/"
    OUTPUT_VARIABLE _arch_files
)
list(TRANSFORM _arch_files APPEND ".cpp")


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Define targets ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

add_library(unicornlua_library SHARED ${LIBRARY_CPP_SOURCES})

target_include_directories(
    unicornlua_library
    PRIVATE
    "${PROJECT_SOURCE_DIR}/include"
    ${UNICORN_HEADERS_PATH}
    ${LUA_HEADERS_PATH}
)

# Create commands for autogenerating all the constants files.
foreach(_file IN ITEMS ${_arch_files})
    get_filename_component(_slug "${_file}" NAME_WE)
    add_custom_target(
        arch_${_slug}
        "${Python3_EXECUTABLE}" "${PROJECT_SOURCE_DIR}/tools/generate_constants.py" "${UNICORN_HEADERS_PATH}/unicorn/${_slug}.h" "${_file}"
        BYPRODUCTS "${_file}"
        WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}"
    )
    add_dependencies(unicornlua_library "arch_${_slug}")
endforeach()


# Override the default naming for the library. On POSIX systems the prefix "lib" is
# added, and the default name (without the prefix) uses the project name. We want the
# end result to be `unicorn.<ext>`.
set_target_properties(
    unicornlua_library PROPERTIES
    PREFIX ""
    OUTPUT_NAME "unicorn"
)


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~ Set compiler options ~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

if (CMAKE_CXX_COMPILER_ID MATCHES "GNU|AppleClang|Clang")
    target_compile_options(unicornlua_library PRIVATE -Wall -Wextra -Werror -Wpedantic)

    if (CMAKE_BUILD_TYPE STREQUAL "Release")
        target_compile_options(unicornlua_library PRIVATE -Ofast -fno-rtti)
    else()
        target_compile_options(unicornlua_library PRIVATE -O0 -ggdb -frtti)
    endif()
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    # Visual studio options
    message(FATAL_ERROR "Visual studio not supported yet.")
endif()


# Apparently OSX requires this stuff: https://stackoverflow.com/q/42371892
if (CMAKE_HOST_APPLE)
    target_link_options(unicornlua_library BEFORE PRIVATE -dynamiclib -undefined dynamic_lookup)
endif()


find_library(PTHREADS_LIBRARY NAMES pthread libpthread)
target_link_libraries(
    unicornlua_library LINK_PUBLIC ${UNICORN_LIBRARY} ${PTHREADS_LIBRARY} ${LUA_LIBRARY}
)


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Installation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

install(
    TARGETS unicornlua_library
    LIBRARY
    DESTINATION ${LUA_INSTALL_DIR}
)
