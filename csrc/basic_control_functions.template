/*
Copyright (C) 2017-2024 by Diego Argueta

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

/***
Implements engine control functions added in Unicorn 2.0.

@submodule unicorn_c_
*/

#include "unicornlua/integer_conversions.h"
#include "unicornlua/unicornlua.h"
#include <lua.h>
#include <unicorn/unicorn.h>
#include <stdint.h>


#if UC_API_MAJOR >= 2

! for _, name in ipairs(no_arguments_return_void) do
/***
 * Wrapper for `uc_ctl_$(name)`.
 *
 * This is an internal library function. End users should use @{engine.Engine:ctl_$(name)}.
 *
 * @function ctl_$(name)
 * @tparam userdata engine  A handle to an open Unicorn engine.
 */
int ul_ctl_$(name)(lua_State* L)
{
    uc_engine *engine = (uc_engine *)lua_topointer(L, 1);
    uc_err error = uc_ctl_$(name)(engine);

    ulinternal_crash_if_failed(L, error, "Control function $(name) failed");
    return 0;
}
! end

! for name, info in pairs(no_arguments_scalar_return) do
/***
 * Wrapper for `uc_ctl_$(name)`.
 *
 * This is an internal library function. End users should use @{engine.Engine:ctl_$(name)}.
 *
 * @function ctl_$(name)
 * @tparam userdata engine  A handle to an open Unicorn engine.
 * @treturn int arg  See the Unicorn Engine documentation for the meaning of the return value.
 */
int ul_ctl_$(name)(lua_State* L)
{
    uc_engine *engine = (uc_engine *)lua_topointer(L, 1);
    $(info.c_type) result;

    uc_err error = uc_ctl_$(name)(engine, &result);
    ulinternal_crash_if_failed(L, error, "Control function $(name) failed");

    ul_push_$(info.c_type)_equiv(L, (ul_lua_$(info.c_type)_equiv_type)result);
    return 1;
}
! end

! for name, arguments in pairs(scalar_arguments_return_void) do
/***
 * Wrapper for `uc_ctl_$(name)`.
 *
 * This is an internal library function. End users should use @{engine.Engine:ctl_$(name)}.
 *
 * @function ctl_$(name)
 * @tparam userdata engine  A handle to an open Unicorn engine.
! for i = 1, #arguments, 1 do
 * @tparam int arg_$(i)  See the Unicorn Engine documentation for the meaning of this argument.
! end
 * @treturn int  See the Unicorn Engine documentation for the meaning of the return value.
 */
int ul_ctl_$(name)(lua_State* L)
{
    uc_engine *engine = (uc_engine *)lua_topointer(L, 1);

! for i, arg_info in ipairs(arguments) do
    $(arg_info.c_type) arg_$(i) = ($(arg_info.c_type))ul_to_$(arg_info.c_type)_equiv(L, $(i + 1));
! end

    uc_err error = uc_ctl_$(name)(
        engine
! for i = 1, #arguments, 1 do
    , arg_$(i)
! end
    );
    ulinternal_crash_if_failed(L, error, "Control function $(name) failed");
    return 0;
}
! end

#endif /* UC_API_MAJOR >= 2 */
